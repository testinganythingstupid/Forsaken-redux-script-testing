# Forsaken-redux-script-testing
Test

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Forsaken redux",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Hello there",
   LoadingSubtitle = "by BlockingChildern",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"

local Tab = Window:CreateTab("exploit", 4483362458) -- Title, Image
local Section = Tab:CreateSection("Main")

local Button = MainTab:CreateButton({
   Name = "Hitbox",
   Callback = function()
 -- Place this LocalScript in StarterPlayerScripts or StarterCharacterScripts

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local originalSize = humanoidRootPart.Size
local expandedSize = Vector3.new(10, 10, 10)

-- Function to expand hitbox
local function expandHitbox()
    humanoidRootPart.Size = expandedSize
    print("Hitbox expanded!")
end

-- Function to reset hitbox
local function resetHitbox()
    humanoidRootPart.Size = originalSize
    print("Hitbox reset!")
end

game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
    if processed then return end
    game.Players.LocalPlayer.Character.Humanoid.Hitbox = (text)
        if humanoidRootPart.Size == originalSize then
            expandHitbox()
        else
            resetHitbox()
        end
    end
end)
   end,
})

local Button = MainTab:CreateButton({
   Name = "Anti stun",
   Callback = function()
public class Killer : Character
{
    public bool HasAntiStun { get; set; }

    public void TryStun()
    {
        if (HasAntiStun)
        {
            // Stun is ignored
            return;
        }
        else
        {
            // Proceed with normal stun logic
            GetStunned();
        }
    }

    private void GetStunned()
    {
        // Existing stun implementation
    }
                        }
   end,
})

            local Button = MainTab:CreateButton({
   Name = "immune to killer hit",
   Callback = function()
public void OnHit(Survivor survivor)
{
    if (survivor.IsImmune)
    {
        // Survivor is immune, do nothing
        return;
    }
    // Otherwise, apply damage or effects
    survivor.ApplyDamage(killer.damage);
                                }
   end,
})

                    local Button = MainTab:CreateButton({
   Name = "Survivor stun",
   Callback = function()
// Survivor uses ability
public void UseAbility(Killer killer)
{
    // Always stun the killer
    killer.Stun(duration: stunDuration);
                                }
   end,
})
